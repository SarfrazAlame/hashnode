generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  expires      DateTime

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@index([userId])
}

model User {
  id            String    @id @default(uuid())
  name          String?
  username      String?   @unique
  bio           String?
  tagline       String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  location      String?
  tech          String?
  available     String?
  twitter       String?
  instagram     String?
  github        String?
  stackoverflow String?
  facebook      String?
  website       String?
  linkedin      String?
  youtube       String?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  posts         Post[]
  likes         Like[]
  saves         Save[]
  comments      Comment[]
  followers     Follows[] @relation("following")
  following     Follows[] @relation("follower")
  sessions      Session[]
  accounts      Account[]
  Reply         Reply[]
}

model Follows {
  follower    User   @relation("follower", fields: [followerId], references: [id])
  followerId  String
  following   User   @relation("following", fields: [followingId], references: [id])
  followingId String

  @@id([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model Post {
  id        String    @id @default(uuid())
  title     String
  story     String
  imageUrl  String?
  category  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  likes     Like[]
  saves     Save[]
  comments  Comment[]

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Comment {
  id   String @id @default(uuid())
  body String

  likes Like[]

  replies Reply[]

  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([postId])
}

model Reply {
  id       String @id @default(uuid())
  response String

  likes Like[]

  commentId String
  comment   Comment @relation(fields: [commentId], references: [id])

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Like {
  id String @id @default(uuid())

  replyId String?
  reply   Reply?  @relation(fields: [replyId], references: [id])

  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String?

  postId String?
  post   Post?   @relation(fields: [postId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Save {
  id String @id @default(uuid())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String

  @@unique([userId, postId])
  @@index([userId])
}
